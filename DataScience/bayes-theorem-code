The following code is for Naive Bayes
Created by - ANALYTICS VIDHYA
'''
-----------------------------------------
# importing required libraries
import pandas as pd
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score

# read the train and test dataset
train_data = pd.read_csv('train-data.csv')
test_data = pd.read_csv('test-data.csv')

# shape of the dataset
print('Shape of training data :',train_data.shape)
print('Shape of testing data :',test_data.shape)
------------------------------------------------------------------------------
# Now, we need to predict the missing target variable in the test data
# target variable - Survived
--------------------------------------------------------------------------------------
# seperate the independent and target variable on training data
train_x = train_data.drop(columns=['Survived'],axis=1)
train_y = train_data['Survived']

# seperate the independent and target variable on testing data
test_x = test_data.drop(columns=['Survived'],axis=1)
test_y = test_data['Survived']
------------------------------------------------------------------------------
'''
Create the object of the Naive Bayes model
You can also add other parameters and test your code here
Some parameters are : var_smoothing
Documentation of sklearn GaussianNB: 

https://scikit-learn.org/stable/modules/generated/sklearn.naive_bayes.GaussianNB.html

 '''
------------------------------------------------------------------------------
model = GaussianNB()

# fit the model with the training data
model.fit(train_x,train_y)

# predict the target on the train dataset
predict_train = model.predict(train_x)
print('Target on train data',predict_train) 

# Accuray Score on train dataset
accuracy_train = accuracy_score(train_y,predict_train)
print('accuracy_score on train dataset : ', accuracy_train)

# predict the target on the test dataset
predict_test = model.predict(test_x)
print('Target on test data',predict_test) 

# Accuracy Score on test dataset
accuracy_test = accuracy_score(test_y,predict_test)
print('accuracy_score on test dataset : ', accuracy_test)

================================================================================================================

import warnings

warnings.filterwarnings(‘ignore’)

import numpy as np

import matplotlib.pyplot as plt

from sklearn.naive_bayes import GaussianNB

from IPython.display import Image

=>Now we are going to create sample three dimensional data for training

x_blue = np.array([1,2,1,5,1.5,2.4,4.9,4.5])

y_blue = np.array([5,6.3,6.1,4,3.5,2,4.1,3])

z_blue = np.array([5,1.3,1.1,1,3.5,2,4.1,3])

 

x_red = np.array([5,7,7,8,5.5,6,6.1,7.7])

y_red = np.array([5,7.7,7,9,5,4,8.5,5.5])

z_red = np.array([5,6.7,7,9,1,4,6.5,5.5])


=> We have to format this data to train with sklearn

red_points = np.array(zip(x_red,y_red,z_red))

blue_points = np.array(zip(x_blue,y_blue,z_blue))

points = np.concatenate([red_points,blue_points])

output = np.concatenate([np.ones(x_red.size),np.zeros(x_blue.size)])


=>Now we want to classify following points


predictor = np.array([5.3,4.2,3.3])

=> We are going to apply Bays classification theorem

classifier = GaussianNB()

classifier.fit(points,output)

print classifier.predict([predictor])
=====================================================================


Lets import required module,

import numpy as np

import pandas as pd

import nltk

Define a function that parse csv file and return feature sets. We are using panda for parsing csv file.

def get_data(name, result=“gender”): 

    df = pd.read_csv(name)

    df[‘last_letter’] = df.apply (lambda row: row[0][-1],axis=1)

    df[‘last_two_letter’] = df.apply (lambda row: row[0][-2:],axis=1)

    df[‘last_is_vowel’] = df.apply (lambda row: int(row[0][-1] in “aeiouy”),axis=1)

    train = df.loc[:,[‘last_letter’,’last_two_letter’,’last_is_vowel’]]

    train_dicts = train.T.to_dict().values()

    genders = df.loc[:,[result]][result]

    return [(train_dict, gender) for train_dict,gender in zip(train_dicts,genders)]

our names.txt is looks like,

df = pd.read_csv(“names.txt”)

print df

name gender

0 ebin M

1 leekas M

2 jinesh M

3 neethu F

4 mary F

5 neenu F

6 sanitha F

7 lekha F

df[‘last_letter’] = df.apply (lambda row: row[0][-1],axis=1)

df[‘last_two_letter’] = df.apply (lambda row: row[0][-2:],axis=1)

df[‘last_is_vowel’] = df.apply (lambda row: int(row[0][-1] in “aeiouy”),axis=1)

The extracted features are like

print df

 
 	 name	gender	last_letter	last_two_letter	last_is_vowel
0	ebin	M	n	in	0
1	leekas	M	s	as	0
2	jinesh	M	h	sh	0
3	neethu	F	u	hu	1
4	mary	F	y	ry	1
5	neenu	F	u	nu	1
6	sanitha	F	a	ha	1
7	lekha	F	a	ha	1
Now we want to train with data from names.txt

train_set = get_data(“names.txt”)

classifier = nltk.NaiveBayesClassifier.train(train_set)

Finally we want to test our model. We can use names from predict.txt file to test the created model

for name_and_feature in get_data(“predict.txt”,”name”):

    print name_and_feature[1],“==”, classifier.classify(name_and_feature[0])

sukesh == M

jithil == M

sijith == M

maria == F

soumya == F

neethu == F








